// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  organizations        Organization[]
  OrganizationsToUsers OrganizationsToUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                     String                   @id @default(cuid())
  name                   String?
  users                  User[]
  sources                Source[]
  OrganizationsToUsers   OrganizationsToUsers[]
  OrganizationsToSources OrganizationsToSources[]
}

model OrganizationsToUsers {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String // relation scalar field (used in the `@relation` attribute above)
  user           User         @relation(fields: [userId], references: [id])
  userId         String // relation scalar field (used in the `@relation` attribute above)
  assignedAt     DateTime     @default(now())

  @@id([organizationId, userId])
}

// this will likely evolve over time simple for now
model Source {
  id                     String                   @id @default(cuid())
  organizationId         String
  organization           Organization             @relation(fields: [organizationId], references: [id])
  name                   String
  description            String
  provider               String
  premisis               String
  status                 String
  connectionString       String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  deletedAt              DateTime?
  OrganizationsToSources OrganizationsToSources[]
}

model OrganizationsToSources {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String // relation scalar field (used in the `@relation` attribute above)
  source         Source       @relation(fields: [sourceId], references: [id])
  sourceId       String // relation scalar field (used in the `@relation` attribute above)
  assignedAt     DateTime     @default(now())

  @@id([organizationId, sourceId])
}
