import { env } from "@/env/server.mjs";

export default class YahooFinance {
  private host: string
  private key: string
  private region: string

  constructor(
    options:
      { host?: string, key?: string, region?: string } | undefined = {}) {

    this.host = options?.host ?? env.RAPID_API_YAHOO_FINANCE_HOST;
    this.key = options?.key ?? env.RAPID_API_YAHOO_FINANCE_KEY;
    this.region = options?.region ?? 'US';

  }

  async financials<AutogeneratedMainTypeFinance>(symbol: string) {
    const params = new URLSearchParams();
    params.set('symbol', symbol);
    params.set('region', this.region);
    return await this.get('/stock/v2/get-financials', params) as AutogeneratedMainTypeFinance;
  }

  async insights<AutogeneratedMainTypeInsights>(symbol: string) {
    const params = new URLSearchParams();
    params.set('symbol', symbol);
    return await this.get('/stock/v2/get-insights', params) as AutogeneratedMainTypeInsights;
  }

  async recommendations<AutogeneratedMainTypeRecommendations>(symbol: string) {
    const params = new URLSearchParams();
    params.set('symbol', symbol);
    return await this.get('/stock/v2/get-recommendations', params) as AutogeneratedMainTypeRecommendations;
  }

  async get(endpoint: string, params: URLSearchParams) {
    try {
      const response = await fetch(`https://${this.host}${endpoint}?${params.toString()}`, {
        method: 'GET',
        headers: {
          'x-rapidapi-host': this.host,
          'x-rapidapi-key': this.key
        }
      });

      return response.json();
    } catch (e: unknown) {
      console.error(`failed to fetch ${endpoint} with params ${params.toString()}`);
      throw e;
    }
  }
}