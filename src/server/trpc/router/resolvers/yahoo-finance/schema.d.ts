
type Quotes = {
  language: string
  region: string
  quoteType: string
  triggerable: boolean
  quoteSourceName: string
  sourceInterval: number
  exchangeTimezoneName: string
  exchangeTimezoneShortName: string
  gmtOffSetMilliseconds: number
  priceHint: number
  exchange: string
  marketState: string
  market: string
  shortName: string
  esgPopulated: boolean
  tradeable: boolean
  postMarketChangePercent: number
  postMarketTime: number
  postMarketPrice: number
  postMarketChange: number
  regularMarketChangePercent: number
  regularMarketPreviousClose: number
  fullExchangeName: string
  exchangeDataDelayedBy: number
  regularMarketPrice: number
  regularMarketTime: number
  regularMarketChange: number
  symbol: string
}


type FinanceResult = {
  error: string
  result: [Result]
}

type AutogeneratedMainTypeRecommendations = {
  finance: FinanceResult
}


type Sector = {
  innovativeness: number
  hiring: number
  sustainability: number
  insiderSentiments: number
  earningsReports: number
  dividends: number
}

type Company = {
  innovativeness: number
  hiring: number
  sustainability: number
  insiderSentiments: number
  earningsReports: number
  dividends: number
}

type CompanySnapshot = {
  sectorInfo: string
  sector: Sector
  company: Company
}

type Reports = {
  id: string
  title: string
  provider: string
  publishedOn: string
  summary: string
}

type Recommendation = {
  targetPrice: number
  provider: string
  rating: string
}

type Valuation = {
  color: number
  description: string
  discount: string
  provider: string
}

type KeyTechnicals = {
  provider: string
  support: number
  resistance: number
  stopLoss: number
}

type TechnicalEvents = {
  provider: string
  shortTerm: string
  midTerm: string
  longTerm: string
}

type InstrumentInfo = {
  recommendation: Recommendation
  valuation: Valuation
  keyTechnicals: KeyTechnicals
  technicalEvents: TechnicalEvents
}

type Result = {
  symbol: string
  companySnapshot: CompanySnapshot
  reports: [Reports]
  instrumentInfo: InstrumentInfo
  count: number
  quotes: [Quotes]
}


type Finance = {
  error: string
  result: Result
}

type AutogeneratedMainTypeInsights = {
  finance: Finance
}


type Meta = {
  symbol: string
  start: number
  end: number
  timeUnit: string
}

type ReportedValue = {
  raw: number
  fmt: string
}

type AnnualDilutedEps = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingSellingGeneralAndAdministration = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualOperatingExpense = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingNetIncomeContinuousOperations = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualEbitda = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingOperatingExpense = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualOperatingIncome = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingGrossProfit = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualOtherIncomeExpense = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingTaxProvision = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualSellingGeneralAndAdministration = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualGrossProfit = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualBasicEps = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualNetIncome = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingPretaxIncome = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingNetIncome = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingInterestExpense = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualTaxProvision = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualDilutedAverageShares = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualInterestExpense = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualPretaxIncome = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualNetIncomeCommonStockholders = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingTotalRevenue = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualBasicAverageShares = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingCostOfRevenue = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingOtherIncomeExpense = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingOperatingIncome = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualCostOfRevenue = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualResearchAndDevelopment = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingResearchAndDevelopment = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TrailingNetIncomeCommonStockholders = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualTotalRevenue = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type AnnualNetIncomeContinuousOperations = {
  dataId: number
  asOfDate: string
  periodType: string
  currencyCode: string
  reportedValue: ReportedValue
}

type TimeSeries = {
  timestamp: [number]
  trailingDilutedAverageShares: [string]
  trailingDilutedEPS: [string]
  trailingBasicEPS: [string]
  trailingBasicAverageShares: [string]
  annualDilutedEPS: [AnnualDilutedEps]
  trailingSellingGeneralAndAdministration: [TrailingSellingGeneralAndAdministration]
  annualOperatingExpense: [AnnualOperatingExpense]
  trailingNetIncomeContinuousOperations: [TrailingNetIncomeContinuousOperations]
  annualEbitda: [AnnualEbitda]
  trailingOperatingExpense: [TrailingOperatingExpense]
  annualOperatingIncome: [AnnualOperatingIncome]
  trailingGrossProfit: [TrailingGrossProfit]
  annualOtherIncomeExpense: [AnnualOtherIncomeExpense]
  trailingTaxProvision: [TrailingTaxProvision]
  annualSellingGeneralAndAdministration: [AnnualSellingGeneralAndAdministration]
  annualGrossProfit: [AnnualGrossProfit]
  annualBasicEPS: [AnnualBasicEps]
  annualNetIncome: [AnnualNetIncome]
  trailingPretaxIncome: [TrailingPretaxIncome]
  trailingNetIncome: [TrailingNetIncome]
  trailingInterestExpense: [TrailingInterestExpense]
  annualTaxProvision: [AnnualTaxProvision]
  annualDilutedAverageShares: [AnnualDilutedAverageShares]
  annualInterestExpense: [AnnualInterestExpense]
  annualPretaxIncome: [AnnualPretaxIncome]
  annualNetIncomeCommonStockholders: [AnnualNetIncomeCommonStockholders]
  trailingTotalRevenue: [TrailingTotalRevenue]
  annualBasicAverageShares: [AnnualBasicAverageShares]
  trailingCostOfRevenue: [TrailingCostOfRevenue]
  trailingOtherIncomeExpense: [TrailingOtherIncomeExpense]
  trailingOperatingIncome: [TrailingOperatingIncome]
  annualCostOfRevenue: [AnnualCostOfRevenue]
  annualResearchAndDevelopment: [AnnualResearchAndDevelopment]
  trailingResearchAndDevelopment: [TrailingResearchAndDevelopment]
  trailingNetIncomeCommonStockholders: [TrailingNetIncomeCommonStockholders]
  annualTotalRevenue: [AnnualTotalRevenue]
  annualNetIncomeContinuousOperations: [AnnualNetIncomeContinuousOperations]
}

type PageViews = {
  shortTermTrend: string
  midTermTrend: string
  longTermTrend: string
  maxAge: number
}

type DayHigh = {
  raw: number
  fmt: string
}

type BidSize = {
  raw: number
  fmt: string
  longFmt: string
}

type DividendYield = {
  raw: number
  fmt: string
}

type Bid = {
  raw: number
  fmt: string
}

type FiftyTwoWeekLow = {
  raw: number
  fmt: string
}

type FiveYearAvgDividendYield = {
  raw: number
  fmt: string
}

type ForwardPe = {
  raw: number
  fmt: string
}

type FiftyTwoWeekHigh = {
  raw: number
  fmt: string
}

type Volume = {
  raw: number
  fmt: string
  longFmt: string
}

type AskSize = {
  raw: number
  fmt: string
  longFmt: string
}

type Ask = {
  raw: number
  fmt: string
}

type DayLow = {
  raw: number
  fmt: string
}

type PriceToSalesTrailing12Months = {
  raw: number
  fmt: string
}

type AverageVolume = {
  raw: number
  fmt: string
  longFmt: string
}

type MarketCap = {
  raw: number
  fmt: string
  longFmt: string
}

type RegularMarketVolume = {
  raw: number
  fmt: string
  longFmt: string
}

type TrailingPe = {
  raw: number
  fmt: string
}

type PriceHint = {
  raw: number
  fmt: string
  longFmt: string
}

type RegularMarketDayLow = {
  raw: number
  fmt: string
}

type Beta = {
  raw: number
  fmt: string
}

type ExDividendDate = {
  raw: number
  fmt: string
}

type DividendRate = {
  raw: number
  fmt: string
}

type AverageVolume10days = {
  raw: number
  fmt: string
  longFmt: string
}

type Open = {
  raw: number
  fmt: string
}

type TrailingAnnualDividendRate = {
  raw: number
  fmt: string
}

type FiftyDayAverage = {
  raw: number
  fmt: string
}

type RegularMarketPreviousClose = {
  raw: number
  fmt: string
}

type AverageDailyVolume10Day = {
  raw: number
  fmt: string
  longFmt: string
}

type RegularMarketDayHigh = {
  raw: number
  fmt: string
}

type PayoutRatio = {
  raw: number
  fmt: string
}

type TrailingAnnualDividendYield = {
  raw: number
  fmt: string
}

type TwoHundredDayAverage = {
  raw: number
  fmt: string
}

type RegularMarketOpen = {
  raw: number
  fmt: string
}

type PreviousClose = {
  raw: number
  fmt: string
}

type SummaryDetail = {
  toCurrency: string
  algorithm: string
  currency: string
  lastMarket: string
  maxAge: number
  fromCurrency: string
  tradeable: boolean
  dayHigh: DayHigh
  bidSize: BidSize
  dividendYield: DividendYield
  bid: Bid
  fiftyTwoWeekLow: FiftyTwoWeekLow
  fiveYearAvgDividendYield: FiveYearAvgDividendYield
  forwardPE: ForwardPe
  fiftyTwoWeekHigh: FiftyTwoWeekHigh
  volume: Volume
  askSize: AskSize
  ask: Ask
  dayLow: DayLow
  priceToSalesTrailing12Months: PriceToSalesTrailing12Months
  averageVolume: AverageVolume
  marketCap: MarketCap
  regularMarketVolume: RegularMarketVolume
  trailingPE: TrailingPe
  priceHint: PriceHint
  regularMarketDayLow: RegularMarketDayLow
  beta: Beta
  exDividendDate: ExDividendDate
  dividendRate: DividendRate
  averageVolume10days: AverageVolume10days
  open: Open
  trailingAnnualDividendRate: TrailingAnnualDividendRate
  fiftyDayAverage: FiftyDayAverage
  regularMarketPreviousClose: RegularMarketPreviousClose
  averageDailyVolume10Day: AverageDailyVolume10Day
  regularMarketDayHigh: RegularMarketDayHigh
  payoutRatio: PayoutRatio
  trailingAnnualDividendYield: TrailingAnnualDividendYield
  twoHundredDayAverage: TwoHundredDayAverage
  regularMarketOpen: RegularMarketOpen
  previousClose: PreviousClose
}

type QuoteType = {
  exchange: string
  shortName: string
  longName: string
  exchangeTimezoneName: string
  exchangeTimezoneShortName: string
  isEsgPopulated: boolean
  gmtOffSetMilliseconds: string
  quoteType: string
  symbol: string
  messageBoardId: string
  market: string
}

type CapitalExpenditures = {
  raw: number
  fmt: string
  longFmt: string
}

type ChangeToNetincome = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherCashflowsFromFinancingActivities = {
  raw: number
  fmt: string
  longFmt: string
}

type ChangeToAccountReceivables = {
  raw: number
  fmt: string
  longFmt: string
}

type ChangeToInventory = {
  raw: number
  fmt: string
  longFmt: string
}

type DividendsPaid = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherCashflowsFromInvestingActivities = {
  raw: number
  fmt: string
  longFmt: string
}

type Depreciation = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalCashFromOperatingActivities = {
  raw: number
  fmt: string
  longFmt: string
}

type RepurchaseOfStock = {
  raw: number
  fmt: string
  longFmt: string
}

type EndDate = {
  raw: number
  fmt: string
}

type ChangeInCash = {
  raw: number
  fmt: string
  longFmt: string
}

type NetIncome = {
  raw: number
  fmt: string
  longFmt: string
}

type ChangeToOperatingActivities = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalCashFromFinancingActivities = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalCashflowsFromInvestingActivities = {
  raw: number
  fmt: string
  longFmt: string
}

type ChangeToLiabilities = {
  raw: number
  fmt: string
  longFmt: string
}

type Investments = {
  raw: number
  fmt: string
  longFmt: string
}

type CashflowStatementHistoryQuarterly = {
  maxAge: number
  cashflowStatements: [CashflowStatements]
}

type AccountsPayable = {
  raw: number
  fmt: string
  longFmt: string
}

type Inventory = {
  raw: number
  fmt: string
  longFmt: string
}

type LongTermDebt = {
  raw: number
  fmt: string
  longFmt: string
}

type NetReceivables = {
  raw: number
  fmt: string
  longFmt: string
}

type ShortTermInvestments = {
  raw: number
  fmt: string
  longFmt: string
}

type NetTangibleAssets = {
  raw: number
  fmt: string
  longFmt: string
}

type LongTermInvestments = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalCurrentAssets = {
  raw: number
  fmt: string
  longFmt: string
}

type PropertyPlantEquipment = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherStockholderEquity = {
  raw: number
  fmt: string
  longFmt: string
}

type ShortLongTermDebt = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalCurrentLiabilities = {
  raw: number
  fmt: string
  longFmt: string
}

type Cash = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherAssets = {
  raw: number
  fmt: string
  longFmt: string
}

type TreasuryStock = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherLiab = {
  raw: number
  fmt: string
  longFmt: string
}

type RetainedEarnings = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherCurrentAssets = {
  raw: number
  fmt: string
  longFmt: string
}

type CommonStock = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalAssets = {
  raw: number
  fmt: string
  longFmt: string
}

type OtherCurrentLiab = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalStockholderEquity = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalLiab = {
  raw: number
  fmt: string
  longFmt: string
}

type BalanceSheetStatements = {
  maxAge: number
  accountsPayable: AccountsPayable
  inventory: Inventory
  longTermDebt: LongTermDebt
  netReceivables: NetReceivables
  shortTermInvestments: ShortTermInvestments
  netTangibleAssets: NetTangibleAssets
  longTermInvestments: LongTermInvestments
  totalCurrentAssets: TotalCurrentAssets
  propertyPlantEquipment: PropertyPlantEquipment
  otherStockholderEquity: OtherStockholderEquity
  shortLongTermDebt: ShortLongTermDebt
  totalCurrentLiabilities: TotalCurrentLiabilities
  cash: Cash
  otherAssets: OtherAssets
  treasuryStock: TreasuryStock
  otherLiab: OtherLiab
  retainedEarnings: RetainedEarnings
  otherCurrentAssets: OtherCurrentAssets
  commonStock: CommonStock
  endDate: EndDate
  totalAssets: TotalAssets
  otherCurrentLiab: OtherCurrentLiab
  totalStockholderEquity: TotalStockholderEquity
  totalLiab: TotalLiab
}

type BalanceSheetHistory = {
  maxAge: number
  balanceSheetStatements: [BalanceSheetStatements]
}

type NetIncomeApplicableToCommonShares = {
  raw: number
  fmt: string
  longFmt: string
}

type NetIncomeFromContinuingOps = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalOtherIncomeExpenseNet = {
  raw: number
  fmt: string
  longFmt: string
}

type CostOfRevenue = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalOperatingExpenses = {
  raw: number
  fmt: string
  longFmt: string
}

type TotalRevenue = {
  raw: number
  fmt: string
  longFmt: string
}

type IncomeTaxExpense = {
  raw: number
  fmt: string
  longFmt: string
}

type InterestExpense = {
  raw: number
  fmt: string
  longFmt: string
}

type OperatingIncome = {
  raw: number
  fmt: string
  longFmt: string
}

type Ebit = {
  raw: number
  fmt: string
  longFmt: string
}

type GrossProfit = {
  raw: number
  fmt: string
  longFmt: string
}

type SellingGeneralAdministrative = {
  raw: number
  fmt: string
  longFmt: string
}

type IncomeBeforeTax = {
  raw: number
  fmt: string
  longFmt: string
}

type ResearchDevelopment = {
  raw: number
  fmt: string
  longFmt: string
}

type IncomeStatementHistory = {
  maxAge: number
  netIncomeApplicableToCommonShares: NetIncomeApplicableToCommonShares
  netIncomeFromContinuingOps: NetIncomeFromContinuingOps
  totalOtherIncomeExpenseNet: TotalOtherIncomeExpenseNet
  costOfRevenue: CostOfRevenue
  totalOperatingExpenses: TotalOperatingExpenses
  totalRevenue: TotalRevenue
  incomeTaxExpense: IncomeTaxExpense
  InterestExpense: InterestExpense
  operatingIncome: OperatingIncome
  endDate: EndDate
  ebit: Ebit
  grossProfit: GrossProfit
  sellingGeneralAdministrative: SellingGeneralAdministrative
  netIncome: NetIncome
  incomeBeforeTax: IncomeBeforeTax
  researchDevelopment: ResearchDevelopment
}

type IncomeStatementHistoryQuarterly = {
  maxAge: number
  incomeStatementHistory: [IncomeStatementHistory]
}

type RegularMarketChangePercent = {
  raw: number
  fmt: string
}

type PostMarketChangePercent = {
  raw: number
  fmt: string
}

type RegularMarketPrice = {
  raw: number
  fmt: string
}

type PostMarketPrice = {
  raw: number
  fmt: string
}

type PostMarketChange = {
  raw: number
  fmt: string
}

type RegularMarketChange = {
  raw: number
  fmt: string
}

type AverageDailyVolume3Month = {
  raw: number
  fmt: string
  longFmt: string
}

type Price = {
  quoteSourceName: string
  exchange: string
  regularMarketTime: number
  shortName: string
  longName: string
  currencySymbol: string
  postMarketTime: number
  exchangeDataDelayedBy: number
  toCurrency: string
  exchangeName: string
  currency: string
  lastMarket: string
  regularMarketSource: string
  marketState: string
  underlyingSymbol: string
  quoteType: string
  postMarketSource: string
  symbol: string
  preMarketSource: string
  maxAge: number
  fromCurrency: string
  regularMarketChangePercent: RegularMarketChangePercent
  postMarketChangePercent: PostMarketChangePercent
  marketCap: MarketCap
  regularMarketVolume: RegularMarketVolume
  regularMarketPrice: RegularMarketPrice
  priceHint: PriceHint
  regularMarketDayLow: RegularMarketDayLow
  postMarketPrice: PostMarketPrice
  postMarketChange: PostMarketChange
  regularMarketPreviousClose: RegularMarketPreviousClose
  regularMarketChange: RegularMarketChange
  averageDailyVolume10Day: AverageDailyVolume10Day
  regularMarketDayHigh: RegularMarketDayHigh
  averageDailyVolume3Month: AverageDailyVolume3Month
  regularMarketOpen: RegularMarketOpen
}

type Revenue = {
  raw: number
  fmt: string
  longFmt: string
}

type Quarterly = {
  date: string
  earnings: Earnings
  revenue: Revenue
}

type Yearly = {
  date: number
  earnings: Earnings
  revenue: Revenue
}

type FinancialsChart = {
  quarterly: [Quarterly]
  yearly: [Yearly]
}

type EarningsDate = {
  raw: number
  fmt: string
}

type CurrentQuarterEstimate = {
  raw: number
  fmt: string
}

type Estimate = {
  raw: number
  fmt: string
}

type Actual = {
  raw: number
  fmt: string
}

type EarningsChart = {
  currentQuarterEstimateDate: string
  currentQuarterEstimateYear: number
  earningsDate: [EarningsDate]
  currentQuarterEstimate: CurrentQuarterEstimate
  quarterly: [Quarterly]
}

type Earnings = {
  maxAge: number
  financialCurrency: string
  financialsChart: FinancialsChart
  earningsChart: EarningsChart
}

type BalanceSheetHistoryQuarterly = {
  maxAge: number
  balanceSheetStatements: [BalanceSheetStatements]
}

type IssuanceOfStock = {
  raw: number
  fmt: string
  longFmt: string
}

type NetBorrowings = {
  raw: number
  fmt: string
  longFmt: string
}

type CashflowStatements = {
  maxAge: number
  capitalExpenditures: CapitalExpenditures
  changeToNetincome: ChangeToNetincome
  otherCashflowsFromFinancingActivities: OtherCashflowsFromFinancingActivities
  changeToAccountReceivables: ChangeToAccountReceivables
  changeToInventory: ChangeToInventory
  dividendsPaid: DividendsPaid
  otherCashflowsFromInvestingActivities: OtherCashflowsFromInvestingActivities
  depreciation: Depreciation
  totalCashFromOperatingActivities: TotalCashFromOperatingActivities
  repurchaseOfStock: RepurchaseOfStock
  endDate: EndDate
  changeInCash: ChangeInCash
  netIncome: NetIncome
  issuanceOfStock: IssuanceOfStock
  changeToOperatingActivities: ChangeToOperatingActivities
  totalCashFromFinancingActivities: TotalCashFromFinancingActivities
  netBorrowings: NetBorrowings
  totalCashflowsFromInvestingActivities: TotalCashflowsFromInvestingActivities
  changeToLiabilities: ChangeToLiabilities
  investments: Investments
}

type CashflowStatementHistory = {
  maxAge: number
  cashflowStatements: [CashflowStatements]
}

type FinancialsTemplate = {
  code: string
  maxAge: number
}

type AutogeneratedMainTypeFinance = {
  symbol: string
  loading: boolean
  errorList: [string]
  meta: Meta
  timeSeries: TimeSeries
  pageViews: PageViews
  summaryDetail: SummaryDetail
  quoteType: QuoteType
  cashflowStatementHistoryQuarterly: CashflowStatementHistoryQuarterly
  balanceSheetHistory: BalanceSheetHistory
  incomeStatementHistory: IncomeStatementHistory
  incomeStatementHistoryQuarterly: IncomeStatementHistoryQuarterly
  price: Price
  earnings: Earnings
  balanceSheetHistoryQuarterly: BalanceSheetHistoryQuarterly
  cashflowStatementHistory: CashflowStatementHistory
  financialsTemplate: FinancialsTemplate
}